#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞ –≤ GitSearch
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É AI-–∞–Ω–∞–ª–∏–∑–∞
"""

import sys
import json
from datetime import datetime

def demo_ai_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI-–∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print("üöÄ GitSearch AI Analysis Demo")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
        from src import constants
        from src.LeakObj import RepoObj
        from src.AIObj import llm_manager
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        print(f"\nü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {len(llm_manager.providers)}")
        for name, provider in llm_manager.providers.items():
            print(f"   - {name}: {provider['model']}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ RepoObj
        print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö GitHub API response
        test_response = {
            "html_url": "https://github.com/test-user/leaked-credentials",
            "name": "leaked-credentials",
            "full_name": "test-user/leaked-credentials",
            "description": "Repository containing API keys and tokens",
            "created_at": "2024-01-15T10:30:00Z",
            "updated_at": "2024-06-15T14:20:00Z",
            "size": 1200,
            "stargazers_count": 2,
            "forks_count": 0,
            "open_issues_count": 1,
            "topics": ["api-keys", "credentials"],
            "owner": {
                "login": "test-user",
                "type": "User"
            }
        }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —É—Ç–µ—á–∫–∏
        leak_obj = RepoObj(
            url="https://github.com/test-user/leaked-credentials",
            responce=test_response,
            dork="api_key OR secret_key",
            company_id=1
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è)
        leak_obj.secrets = {
            "api_keys": [
                "OPENAI_API_KEY=sk-abc123...",
                "AWS_ACCESS_KEY=AKIA...",
                "DATABASE_URL=postgresql://user:pass@host:5432/db"
            ],
            "tokens": [
                "GITHUB_TOKEN=ghp_abc123...",
                "SLACK_TOKEN=xoxb-abc..."
            ]
        }
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
        company_info = {
            "name": "Alpha-Bet",
            "keywords": ["google", "alphabet", "gmail"],
            "domains": ["google.com", "alphabet.com", "gmail.com"],
            "country": "us"
        }
        leak_obj.set_company_info(company_info)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {leak_obj.repo_name}")
        print(f"   - –ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ä–µ—Ç–æ–≤: {len(leak_obj.secrets)}")
        print(f"   - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {leak_obj.dork}")
        
        # –ó–∞–ø—É—Å–∫ AI-–∞–Ω–∞–ª–∏–∑–∞
        print(f"\nüîç –ó–∞–ø—É—Å–∫ AI-–∞–Ω–∞–ª–∏–∑–∞...")
        
        if constants.AI_ANALYSIS_ENABLED:
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ AI –æ–±—ä–µ–∫—Ç–∞
                leak_obj._create_ai_obj()
                print("‚úÖ AI –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
                available_provider = llm_manager.get_available_provider()
                if available_provider:
                    print(f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {available_provider['name']}")
                    
                    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
                    print("ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI-–∞–Ω–∞–ª–∏–∑–∞...")
                    leak_obj.ai_obj.ai_request()
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
                    print(f"   - AI Result: {leak_obj.ai_obj.ai_result}")
                    print(f"   - AI Report: {leak_obj.ai_obj.ai_report}")
                    
                    # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    comprehensive_analysis = leak_obj.ai_obj.analyze_leak_comprehensive()
                    if comprehensive_analysis:
                        print(f"   - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {comprehensive_analysis}")
                    
                else:
                    print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ AI-–∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
                import traceback
                traceback.print_exc()
        else:
            print("‚ùå AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –æ–±—ä–µ–∫—Ç–∞
        print(f"\nüíæ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î...")
        try:
            obj_data = leak_obj.write_obj()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: {len(obj_data)}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
            key_fields = ['url', 'author_info', 'level', 'leak_type', 'result']
            for field in key_fields:
                if len(obj_data) > key_fields.index(field):
                    print(f"   - {field}: {obj_data[key_fields.index(field)]}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        
        # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüìà –°–≤–æ–¥–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        print(f"   - LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(llm_manager.providers)}")
        print(f"   - AI –∞–Ω–∞–ª–∏–∑: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if constants.AI_ANALYSIS_ENABLED else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
        print(f"   - –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç: ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω")
        print(f"   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LeakObj: ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def show_configuration():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI-–∞–Ω–∞–ª–∏–∑–∞"""
    
    print("\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI-–∞–Ω–∞–ª–∏–∑–∞:")
    print("=" * 30)
    
    try:
        from src import constants
        
        print(f"AI_ANALYSIS_ENABLED: {constants.AI_ANALYSIS_ENABLED}")
        print(f"AI_ANALYSIS_TIMEOUT: {constants.AI_ANALYSIS_TIMEOUT}")
        print(f"AI_MAX_CONTEXT_LENGTH: {constants.AI_MAX_CONTEXT_LENGTH}")
        print(f"AI_COMPANY_RELEVANCE_THRESHOLD: {constants.AI_COMPANY_RELEVANCE_THRESHOLD}")
        print(f"AI_TRUE_POSITIVE_THRESHOLD: {constants.AI_TRUE_POSITIVE_THRESHOLD}")
        
        print(f"\nLLM_PROVIDERS: {len(constants.LLM_PROVIDERS)}")
        for provider in constants.LLM_PROVIDERS:
            api_key = provider.get('api_key_env', 'N/A')
            status = '‚úÖ' if api_key else '‚ùå'
            print(f"  {status} {provider['name']}: {provider['model']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def test_ai():
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    show_configuration()
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    success = demo_ai_analysis()
    
    if success:
        print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üí° GitSearch –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º")
    else:
        print(f"\nüí• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
