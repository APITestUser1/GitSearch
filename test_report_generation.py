#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ GitSearch
"""

import os
import sys
import json
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src import reports, Connector, constants

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn, cursor = Connector.connect_to_database()
        if conn and cursor:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
            cursor.execute("SHOW TABLES")
            tables = cursor.fetchall()
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            for table in tables:
                print(f"   - {table[0]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ leak
            cursor.execute("SELECT COUNT(*) FROM leak")
            leak_count = cursor.fetchone()[0]
            print(f"üîç –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ leak: {leak_count}")
            
            if leak_count > 0:
                cursor.execute("SELECT MIN(DATE(created_at)), MAX(DATE(created_at)) FROM leak")
                date_range = cursor.fetchone()
                print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {date_range[0]} - {date_range[1]}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø–∏—Å–µ–π
                cursor.execute("SELECT url, leak_type, level, created_at FROM leak LIMIT 5")
                samples = cursor.fetchall()
                print("üîé –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
                for sample in samples:
                    print(f"   - {sample[0]} | {sample[1]} | –£—Ä–æ–≤–µ–Ω—å: {sample[2]} | {sample[3]}")
            
            conn.close()
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_report_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤...")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        end_date = datetime.now().strftime('%Y-%m-%d')
        start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞: {start_date} - {end_date}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç
        print("\nüè¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç–∞...")
        try:
            business_report = reports.generate_report(
                start_date=start_date,
                end_date=end_date,
                report_type="business"
            )
            print("‚úÖ –ë–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {business_report.get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            
            # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\nüìà –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –í—Å–µ–≥–æ —É—Ç–µ—á–µ–∫: {business_report.get('total_leaks', 0)}")
            print(f"   - –°—Ä–µ–¥–Ω—è—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {business_report.get('average_severity', 0):.2f}")
            print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {business_report.get('unique_companies', 0)}")
            print(f"   - –í—ã—Å–æ–∫–æ—Å–µ—Ä—å–µ–∑–Ω—ã—Ö —É—Ç–µ—á–µ–∫: {business_report.get('high_severity_count', 0)}")
            print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {business_report.get('successful_scans', 0)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç–∞: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        print("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        try:
            technical_report = reports.generate_report(
                start_date=start_date,
                end_date=end_date,
                report_type="technical"
            )
            print("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {technical_report.get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            
            # –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –û—Ç—á–µ—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {technical_report.get('error_reports', 0)}")
            print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {technical_report.get('successful_reports', 0)}")
            print(f"   - –û—à–∏–±–æ–∫ '—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π': {technical_report.get('too_large_repo_errors', 0)}")
            
            leak_stats = technical_report.get('leak_stats_summary', {})
            print(f"   - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {leak_stats.get('avg_size', 0):.2f}")
            print(f"   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–∫–æ–≤: {leak_stats.get('avg_forks', 0):.2f}")
            print(f"   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {leak_stats.get('avg_stars', 0):.2f}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")

def test_with_specific_dates():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–∞—Ç–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = os.path.join(os.path.dirname(__file__), 'config.json')
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        start_date = config.get('start_date', '2025-06-19')
        end_date = config.get('end_date', '2025-06-19')
        report_type = config.get('report_type', 'business')
        
        print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {report_type} –æ—Ç—á–µ—Ç–∞ –¥–ª—è {start_date} - {end_date}")
        
        report_result = reports.generate_report(
            start_date=start_date,
            end_date=end_date,
            report_type=report_type
        )
        
        print("‚úÖ –û—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìÅ –§–∞–π–ª: {report_result.get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"üìà –í—Å–µ–≥–æ —É—Ç–µ—á–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥: {report_result.get('total_leaks', 0)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏: {e}")

def check_report_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤...")
    
    reports_dir = os.path.join(constants.MAIN_FOLDER_PATH, "reports")
    
    if os.path.exists(reports_dir):
        files = os.listdir(reports_dir)
        html_files = [f for f in files if f.endswith('.html')]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ HTML –æ—Ç—á–µ—Ç–æ–≤: {len(html_files)}")
        for file in html_files:
            file_path = os.path.join(reports_dir, file)
            file_size = os.path.getsize(file_path)
            file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
            print(f"   - {file} ({file_size} –±–∞–π—Ç, {file_time.strftime('%Y-%m-%d %H:%M:%S')})")
    else:
        print("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def test_full_period_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ —Å –ø–µ—Ä–≤–æ–π —É—Ç–µ—á–∫–∏ –≤ –±–∞–∑–µ"""
    print("\nüóìÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn, cursor = Connector.connect_to_database()
        if not conn or not cursor:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        cursor.execute("SELECT MIN(DATE(created_at)), MAX(DATE(created_at)) FROM leak")
        date_range = cursor.fetchone()
        conn.close()
        
        if not date_range or not date_range[0]:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–∑ –±–∞–∑—ã")
            return
        
        start_date = str(date_range[0])
        end_date = str(date_range[1])
        
        print(f"üìÖ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        print("\nüè¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥...")
        try:
            business_report = reports.generate_report(
                start_date=start_date,
                end_date=end_date,
                report_type="business"
            )
            print("‚úÖ –ü–æ–ª–Ω—ã–π –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            print(f"üìÅ –§–∞–π–ª: {business_report.get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥:")
            print(f"   - –í—Å–µ–≥–æ —É—Ç–µ—á–µ–∫: {business_report.get('total_leaks', 0)}")
            print(f"   - –°—Ä–µ–¥–Ω—è—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {business_report.get('average_severity', 0):.2f}")
            print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {business_report.get('unique_companies', 0)}")
            print(f"   - –í—ã—Å–æ–∫–æ—Å–µ—Ä—å–µ–∑–Ω—ã—Ö —É—Ç–µ—á–µ–∫: {business_report.get('high_severity_count', 0)}")
            print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {business_report.get('successful_scans', 0)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç–∞: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        print("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥...")
        try:
            technical_report = reports.generate_report(
                start_date=start_date,
                end_date=end_date,
                report_type="technical"
            )
            print("‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            print(f"üìÅ –§–∞–π–ª: {technical_report.get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            
            # –í—ã–≤–æ–¥–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
            print("\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥:")
            print(f"   - –û—Ç—á–µ—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {technical_report.get('error_reports', 0)}")
            print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {technical_report.get('successful_reports', 0)}")
            print(f"   - –û—à–∏–±–æ–∫ '—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π': {technical_report.get('too_large_repo_errors', 0)}")
            
            leak_stats = technical_report.get('leak_stats_summary', {})
            print(f"   - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {leak_stats.get('avg_size', 0):.2f}")
            print(f"   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–∫–æ–≤: {leak_stats.get('avg_forks', 0):.2f}")
            print(f"   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {leak_stats.get('avg_stars', 0):.2f}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ GitSearch")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not test_database_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã
    check_report_files()
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤
    test_report_generation()
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –¥–∞—Ç–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    test_with_specific_dates()
    
    # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
    test_full_period_report()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
